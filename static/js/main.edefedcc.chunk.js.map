{"version":3,"sources":["assets/icon-pin-marker.png","components/IconMarker.js","components/Markers.js","components/MapView.js","components/MyLocation.js","App.js","reportWebVitals.js","index.js"],"names":["IconMarker","L","icon","iconUrl","IconMine","iconRetinaUrl","iconAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","classNam","Markers","props","places","map","place","i","Marker","position","coordinates","Popup","name","MapView","location","useLocation","console","log","useState","zoom","mapCenter","myLocation","MapContainer","center","lat","latitude","lng","longitude","TileLayer","attribution","url","MyLocation","locationMine","setLocation","useEffect","navigator","geolocation","getCurrentPosition","coords","error","enableHighAccuracy","to","pathname","App","basename","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ypBAAe,G,MAAA,IAA0B,6C,OCM5BA,E,OAAaC,EAAEC,KAAK,CAC7BC,QAASC,EAETC,cAAeD,EACfE,WAAW,KACXC,UAAU,KACVC,WAAW,KACXC,aAAa,KACbC,SAAS,CAAC,IACVC,SAAS,uB,OCQEC,EAlBC,SAACC,GAeb,OAZmBA,EAAXC,OAEeC,KAAI,SAACC,EAAOC,GAAR,OAEvB,cAACC,EAAA,EAAD,CAA6BC,SAAUH,EAAMI,YACzClB,KAAMF,EADV,SAEI,cAACqB,EAAA,EAAD,UACIL,EAAMM,QAHDL,EAAID,EAAMM,U,QC6ChBC,EA3CC,WAEZ,IAAMC,EAAWC,cAEjBC,QAAQC,IAAI,yBAA0BH,GAJpB,MAQgBI,mBAC9B,CACIR,YAAY,CAAC,mBAAmB,kBAChCS,KAAK,KAXK,mBAQXC,EARW,UAkBhB,OAAGN,EAASO,YACRL,QAAQC,IAAI,UACL,eAACK,EAAA,EAAD,CAAcC,OAAQ,CAACC,IAAIV,EAASO,WAAWI,SAAUC,IAAIZ,EAASO,WAAWM,WAAYR,KAAM,GAAnG,UACL,cAACS,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAER,cAACtB,EAAA,EAAD,CAAQC,SAAU,CAACe,IAAIV,EAASO,WAAWI,SAAUC,IAAIZ,EAASO,WAAWM,WAC7EnC,KAAMF,EADN,SAEA,cAACqB,EAAA,EAAD,wCAOA,eAACW,EAAA,EAAD,CAAcC,OAAQH,EAAUV,YAAaS,KAAMC,EAAUD,KAA7D,UACJ,cAACS,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAET,cAAC,EAAD,CAAS1B,OAAQA,MALZ,QCRG2B,EArCI,WAAO,IAAD,EAEeb,mBAAS,CACzCS,UAAU,EACVF,SAAS,IAJQ,mBAEdO,EAFc,KAEAC,EAFA,KAwBrB,OAhBAC,qBAAU,WACNC,UAAUC,YAAYC,oBAAoB,SAAS5B,GAC/CwB,EAAY,CACRN,UAAWlB,EAAS6B,OAAOX,UAC3BF,SAAUhB,EAAS6B,OAAOb,cAE/B,SAASc,GACRvB,QAAQC,IAAIsB,KACd,CAEEC,oBAAmB,MAEzB,IAGNxB,QAAQC,IAAI,cAAee,GAEnB,gCACG,uDACA,0CAAaA,EAAaL,UAA1B,OACA,yCAAYK,EAAaP,SAAzB,OACJ,cAAC,IAAD,CAAMgB,GAAI,CACNC,SAAS,IACTrB,WAAWW,GAFf,wCCVQW,MAff,WACE,OACE,cAAC,IAAD,CAAQC,SAAS,gBAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,cAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,YCHKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.edefedcc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-pin-marker.f46be6c2.png\";","import IconMine from '../assets/icon-pin-marker.png'\r\n// marcador\r\nimport L from 'leaflet'\r\n\r\n//Se exporta el IconMarker creado \r\n\r\nexport const IconMarker = L.icon({\r\n    iconUrl: IconMine,\r\n    //iconUrl: require(\"../assets/icon-pin-marker.png\"), // tambien se puede llamar la imagen con require desde aquí\r\n    iconRetinaUrl: IconMine, \r\n    iconAnchor:null,\r\n    shadowUrl:null,\r\n    shadowSize:null,\r\n    shadowAnchor:null,\r\n    iconSize:[20],\r\n    classNam:\"leaflet-venue-icon\"\r\n\r\n})\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Marker, Popup } from 'react-leaflet'\r\nimport { IconMarker } from './IconMarker'\r\n\r\n\r\nconst Markers = (props) => {\r\n\r\n    //Obtenemos el arreglo places desde props\r\n    const { places } = props;\r\n\r\n    const markers = places.map((place, i) => (\r\n\r\n        <Marker key={i + place.name} position={place.coordinates}\r\n            icon={IconMarker} >\r\n            <Popup>\r\n               {place.name}\r\n            </Popup>\r\n        </Marker>\r\n\r\n    ));\r\n    return markers;\r\n}\r\n\r\nexport default Markers\r\n","import React,{useState, useEffect} from 'react'\r\n\r\nimport { MapContainer, TileLayer,Marker,Popup } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport Markers from './Markers'\r\nimport { IconMarker } from './IconMarker'\r\n\r\nimport {useLocation, useHistory} from 'react-router-dom'\r\nimport {places} from '../assets/locations-example.json'\r\n//Importamos el arreglo places del json para obtener los lugares\r\n/*\r\n--Se tiene que importar la hoja de estilos de leaflet para que se visualice correctamente el mapa\r\n--Se agrega las dimensiones del mapa llamado .leaflet-container en una hoja de estilos\r\n */\r\nconst MapView = () => {\r\n\r\n    const location = useLocation();\r\n    //const history = useHistory();\r\n    console.log(\"Utilizando useLocation\", location);\r\n\r\n   \r\n    // const para definir centro y zoom del mapa inicial\r\n    const [mapCenter, setMapCenter] = useState(\r\n        {\r\n            coordinates:[19.42699655663159,-99.1676650667239] ,\r\n            zoom:10\r\n        }\r\n    )\r\n\r\n\r\n\r\n      \r\n      if(location.myLocation  ){\r\n          console.log(\"gggggg\")\r\n          return(<MapContainer center={{lat:location.myLocation.latitude, lng:location.myLocation.longitude}} zoom={18} >\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker position={{lat:location.myLocation.latitude, lng:location.myLocation.longitude}}\r\n            icon={IconMarker} >\r\n            <Popup>\r\n               Ubicación Actual\r\n            </Popup>\r\n        </Marker>\r\n        </MapContainer>)\r\n      \r\n      }\r\n    return (<MapContainer center={mapCenter.coordinates} zoom={mapCenter.zoom} >\r\n        <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n       <Markers places={places} /> {/* Se envia el arreglo a través de Props al componente hijo Markers*/}\r\n    </MapContainer>)\r\n\r\n}\r\nexport default MapView;\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Link ,useLocation} from 'react-router-dom'\r\n\r\nconst MyLocation = () => {\r\n\r\n    const [locationMine, setLocation] = useState({\r\n        longitude:0,\r\n        latitude:0\r\n    });\r\n    \r\n    \r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition( function(position){\r\n            setLocation({\r\n                longitude: position.coords.longitude,\r\n                latitude: position.coords.latitude\r\n            })\r\n        }, function(error){\r\n            console.log(error)\r\n        },{\r\n            //para ser más precisa la localización\r\n            enableHighAccuracy:true\r\n        } )\r\n    },[] )\r\n\r\n\r\nconsole.log(\"My location\", locationMine);\r\n    return (\r\n        <div>\r\n           <h1>Mi geolocalización</h1> \r\n           <p>Longitud:{locationMine.longitude} </p>\r\n           <p>Latitud:{locationMine.latitude} </p>\r\n       <Link to={{\r\n           pathname:'/',\r\n           myLocation:locationMine\r\n       }}>Ver mi localización</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyLocation\r\n","import './App.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nimport MapView from './components/MapView';\r\nimport MyLocation from './components/MyLocation';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename=\"/Mapa-Leaflet\">\r\n      <Switch>\r\n        <Route path='/myLocation'   >\r\n          <MyLocation />\r\n        </Route>\r\n        <Route path='/'  >\r\n          <MapView />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}